1、请求重试： 
      requests.adapters.DEFAULT_RETRIES = 5     # 增加重连次数

2、pytest：pytest.main 中添加 ff参数：
      -s                  ：显示打印内容
      -k                  ：执行某个关键字的用例   
      -x                  :  遇到错误时停止
      -v                  ：详细结果
      -q                  ：极简结果显示
      --reruns=2                 失败重试
      --junit-xml=path        输出xml文件格式，在与jenkins做集成时使用
      --result-log=path      将最后的结果保存到本地文件中
      –ff (fail first)：            运行所有的测试用例，上次运行失败的用例优先执行
      pytest.main(['-s','--ff','test_firstFile.py'])

3、pytest能兼容unittest，是unittest的扩展，一般都是执行以test_开头的函数和类。
      类中不能带init方法，使用assert进行断言。

4、用例定时执行。
      查看：crontab -e
      执行：minute hour day month week command

5、存在问题：
      1、case过多运行时间过长的问题，
      2、部分接口case缺失。
      3、部分接口验签算法未统一。

6、测试依赖包管理：
      pip3 freeze > requirement.txt
      pip3 install -r requirement.txt

7、流程：
      0、基于python3+rquests+pytest做的二次开发。
      1、读取xml的配置，确定需要回归的case筛选条件。
      2、 从mysql读取配置对应的数据。
      3、将case重新计算验签、替换时间等参数进行封装，发送请求。
      4、根据case返回与数据库存在校验点进行比较，不一致的case发送报警。
      5、将运行记录入库。
